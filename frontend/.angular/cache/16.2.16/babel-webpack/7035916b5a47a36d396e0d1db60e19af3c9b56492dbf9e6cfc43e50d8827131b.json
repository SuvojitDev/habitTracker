{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AdminService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'https://habittracker-nsf3.onrender.com/api/admin';\n    this.currentAdminSubject = new BehaviorSubject(null);\n    this.currentAdmin$ = this.currentAdminSubject.asObservable();\n    this.loadAdminFromStorage();\n  }\n  login(credentials) {\n    return this.http.post(`${this.apiUrl}/login`, credentials);\n  }\n  setCurrentAdmin(adminData) {\n    localStorage.setItem('adminToken', adminData.token);\n    localStorage.setItem('admin', JSON.stringify(adminData.admin));\n    this.currentAdminSubject.next(adminData.admin);\n  }\n  logout() {\n    localStorage.removeItem('adminToken');\n    localStorage.removeItem('admin');\n    this.currentAdminSubject.next(null);\n  }\n  getToken() {\n    return localStorage.getItem('adminToken');\n  }\n  isAuthenticated() {\n    return !!this.getToken();\n  }\n  getDashboardStats() {\n    return this.http.get(`${this.apiUrl}/dashboard`);\n  }\n  getUsers(page = 1, limit = 10, search = '', sortBy = 'createdAt', sortOrder = 'desc') {\n    let params = new HttpParams().set('page', page.toString()).set('limit', limit.toString()).set('sortBy', sortBy).set('sortOrder', sortOrder);\n    if (search) {\n      params = params.set('search', search);\n    }\n    return this.http.get(`${this.apiUrl}/users`, {\n      params\n    });\n  }\n  getHabits(page = 1, limit = 10, search = '', category = '') {\n    let params = new HttpParams().set('page', page.toString()).set('limit', limit.toString());\n    if (search) params = params.set('search', search);\n    if (category) params = params.set('category', category);\n    return this.http.get(`${this.apiUrl}/habits`, {\n      params\n    });\n  }\n  deleteUser(userId) {\n    return this.http.delete(`${this.apiUrl}/users/${userId}`);\n  }\n  updateUserXP(userId, totalXP) {\n    return this.http.put(`${this.apiUrl}/users/${userId}/xp`, {\n      totalXP\n    });\n  }\n  clearAllData() {\n    return this.http.delete(`${this.apiUrl}/clear-all`);\n  }\n  getSystemAnalytics() {\n    return this.http.get(`${this.apiUrl}/analytics`);\n  }\n  getStats() {\n    return this.http.get(`${this.apiUrl}/stats`);\n  }\n  deleteHabit(habitId) {\n    return this.http.delete(`${this.apiUrl}/habits/${habitId}`);\n  }\n  deleteInactiveHabits() {\n    return this.http.delete(`${this.apiUrl}/habits/inactive`);\n  }\n  exportHabitsData() {\n    return this.http.get(`${this.apiUrl}/export/habits`);\n  }\n  exportAllData() {\n    return this.http.get(`${this.apiUrl}/export/all`, {\n      responseType: 'blob'\n    });\n  }\n  resetAllUserXP() {\n    return this.http.post(`${this.apiUrl}/reset-xp`, {});\n  }\n  sendBulkNotification(message) {\n    return this.http.post(`${this.apiUrl}/notify-all`, {\n      message\n    });\n  }\n  toggleMaintenance() {\n    return this.http.post(`${this.apiUrl}/maintenance`, {});\n  }\n  createDailyChallenge() {\n    return this.http.post(`${this.apiUrl}/challenges/create`, {});\n  }\n  createAchievement(data) {\n    return this.http.post(`${this.apiUrl}/achievements/create`, data);\n  }\n  loadAdminFromStorage() {\n    const admin = localStorage.getItem('admin');\n    if (admin) {\n      this.currentAdminSubject.next(JSON.parse(admin));\n    }\n  }\n  static {\n    this.ɵfac = function AdminService_Factory(t) {\n      return new (t || AdminService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AdminService,\n      factory: AdminService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpParams","BehaviorSubject","AdminService","constructor","http","apiUrl","currentAdminSubject","currentAdmin$","asObservable","loadAdminFromStorage","login","credentials","post","setCurrentAdmin","adminData","localStorage","setItem","token","JSON","stringify","admin","next","logout","removeItem","getToken","getItem","isAuthenticated","getDashboardStats","get","getUsers","page","limit","search","sortBy","sortOrder","params","set","toString","getHabits","category","deleteUser","userId","delete","updateUserXP","totalXP","put","clearAllData","getSystemAnalytics","getStats","deleteHabit","habitId","deleteInactiveHabits","exportHabitsData","exportAllData","responseType","resetAllUserXP","sendBulkNotification","message","toggleMaintenance","createDailyChallenge","createAchievement","data","parse","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Suvojit\\OneDrive\\Desktop\\angular projects\\habittracker\\frontend\\src\\app\\core\\services\\admin.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\nexport interface AdminUser {\n  _id: string;\n  username: string;\n  email: string;\n  totalXP: number;\n  level: number;\n  createdAt: Date;\n  stats: any;\n}\n\nexport interface PaginatedResponse<T> {\n  data?: T[];\n  users?: T[];\n  habits?: T[];\n  pagination: {\n    page: number;\n    limit: number;\n    total: number;\n    pages: number;\n  };\n}\n\nexport interface DashboardStats {\n  stats: {\n    userCount: number;\n    habitCount: number;\n    challengeCount: number;\n    achievementCount: number;\n  };\n  recentUsers: AdminUser[];\n  topUsers: AdminUser[];\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AdminService {\n  private apiUrl = 'https://habittracker-nsf3.onrender.com/api/admin';\n  private currentAdminSubject = new BehaviorSubject<any>(null);\n  public currentAdmin$ = this.currentAdminSubject.asObservable();\n\n  constructor(private http: HttpClient) {\n    this.loadAdminFromStorage();\n  }\n\n  login(credentials: { email: string; password: string }): Observable<any> {\n    return this.http.post(`${this.apiUrl}/login`, credentials);\n  }\n\n  setCurrentAdmin(adminData: any): void {\n    localStorage.setItem('adminToken', adminData.token);\n    localStorage.setItem('admin', JSON.stringify(adminData.admin));\n    this.currentAdminSubject.next(adminData.admin);\n  }\n\n  logout(): void {\n    localStorage.removeItem('adminToken');\n    localStorage.removeItem('admin');\n    this.currentAdminSubject.next(null);\n  }\n\n  getToken(): string | null {\n    return localStorage.getItem('adminToken');\n  }\n\n  isAuthenticated(): boolean {\n    return !!this.getToken();\n  }\n\n  getDashboardStats(): Observable<DashboardStats> {\n    return this.http.get<DashboardStats>(`${this.apiUrl}/dashboard`);\n  }\n\n  getUsers(page: number = 1, limit: number = 10, search: string = '', sortBy: string = 'createdAt', sortOrder: string = 'desc'): Observable<PaginatedResponse<AdminUser>> {\n    let params = new HttpParams()\n      .set('page', page.toString())\n      .set('limit', limit.toString())\n      .set('sortBy', sortBy)\n      .set('sortOrder', sortOrder);\n\n    if (search) {\n      params = params.set('search', search);\n    }\n\n    return this.http.get<PaginatedResponse<AdminUser>>(`${this.apiUrl}/users`, { params });\n  }\n\n  getHabits(page: number = 1, limit: number = 10, search: string = '', category: string = ''): Observable<PaginatedResponse<any>> {\n    let params = new HttpParams()\n      .set('page', page.toString())\n      .set('limit', limit.toString());\n\n    if (search) params = params.set('search', search);\n    if (category) params = params.set('category', category);\n\n    return this.http.get<PaginatedResponse<any>>(`${this.apiUrl}/habits`, { params });\n  }\n\n  deleteUser(userId: string): Observable<any> {\n    return this.http.delete(`${this.apiUrl}/users/${userId}`);\n  }\n\n  updateUserXP(userId: string, totalXP: number): Observable<any> {\n    return this.http.put(`${this.apiUrl}/users/${userId}/xp`, { totalXP });\n  }\n\n  clearAllData(): Observable<any> {\n    return this.http.delete(`${this.apiUrl}/clear-all`);\n  }\n\n  getSystemAnalytics(): Observable<any> {\n    return this.http.get(`${this.apiUrl}/analytics`);\n  }\n\n  getStats(): Observable<any> {\n    return this.http.get(`${this.apiUrl}/stats`);\n  }\n\n  deleteHabit(habitId: string): Observable<any> {\n    return this.http.delete(`${this.apiUrl}/habits/${habitId}`);\n  }\n\n  deleteInactiveHabits(): Observable<any> {\n    return this.http.delete(`${this.apiUrl}/habits/inactive`);\n  }\n\n  exportHabitsData(): Observable<any> {\n    return this.http.get(`${this.apiUrl}/export/habits`);\n  }\n\n  exportAllData(): Observable<Blob> {\n    return this.http.get(`${this.apiUrl}/export/all`, { responseType: 'blob' });\n  }\n\n  resetAllUserXP(): Observable<any> {\n    return this.http.post(`${this.apiUrl}/reset-xp`, {});\n  }\n\n  sendBulkNotification(message: string): Observable<any> {\n    return this.http.post(`${this.apiUrl}/notify-all`, { message });\n  }\n\n  toggleMaintenance(): Observable<any> {\n    return this.http.post(`${this.apiUrl}/maintenance`, {});\n  }\n\n  createDailyChallenge(): Observable<any> {\n    return this.http.post(`${this.apiUrl}/challenges/create`, {});\n  }\n\n  createAchievement(data: { name: string; description: string; xpReward: number }): Observable<any> {\n    return this.http.post(`${this.apiUrl}/achievements/create`, data);\n  }\n\n  private loadAdminFromStorage(): void {\n    const admin = localStorage.getItem('admin');\n    if (admin) {\n      this.currentAdminSubject.next(JSON.parse(admin));\n    }\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}