{"ast":null,"code":"import { BehaviorSubject, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'https://habittracker-nsf3.onrender.com/api/auth';\n    this.currentUserSubject = new BehaviorSubject(null);\n    this.currentUser$ = this.currentUserSubject.asObservable();\n    this.loadUserFromStorage();\n  }\n  login(credentials) {\n    return this.http.post(`${this.apiUrl}/login`, credentials).pipe(tap(response => this.setCurrentUser(response)));\n  }\n  register(userData) {\n    return this.http.post(`${this.apiUrl}/register`, userData).pipe(tap(response => this.setCurrentUser(response)));\n  }\n  logout() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    this.currentUserSubject.next(null);\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  isAuthenticated() {\n    return !!this.getToken();\n  }\n  getCurrentUser() {\n    return this.currentUserSubject.value;\n  }\n  setCurrentUser(response) {\n    localStorage.setItem('token', response.token);\n    localStorage.setItem('user', JSON.stringify(response.user));\n    this.currentUserSubject.next(response.user);\n  }\n  loadUserFromStorage() {\n    const user = localStorage.getItem('user');\n    if (user) {\n      this.currentUserSubject.next(JSON.parse(user));\n    }\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","tap","AuthService","constructor","http","apiUrl","currentUserSubject","currentUser$","asObservable","loadUserFromStorage","login","credentials","post","pipe","response","setCurrentUser","register","userData","logout","localStorage","removeItem","next","getToken","getItem","isAuthenticated","getCurrentUser","value","setItem","token","JSON","stringify","user","parse","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Suvojit\\OneDrive\\Desktop\\angular projects\\habittracker\\frontend\\src\\app\\core\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable, tap } from 'rxjs';\nimport { User, LoginRequest, RegisterRequest, AuthResponse } from '../models/user.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private apiUrl = 'https://habittracker-nsf3.onrender.com/api/auth';\n  private currentUserSubject = new BehaviorSubject<User | null>(null);\n  public currentUser$ = this.currentUserSubject.asObservable();\n\n  constructor(private http: HttpClient) {\n    this.loadUserFromStorage();\n  }\n\n  login(credentials: LoginRequest): Observable<AuthResponse> {\n    return this.http.post<AuthResponse>(`${this.apiUrl}/login`, credentials)\n      .pipe(tap(response => this.setCurrentUser(response)));\n  }\n\n  register(userData: RegisterRequest): Observable<AuthResponse> {\n    return this.http.post<AuthResponse>(`${this.apiUrl}/register`, userData)\n      .pipe(tap(response => this.setCurrentUser(response)));\n  }\n\n  logout(): void {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    this.currentUserSubject.next(null);\n  }\n\n  getToken(): string | null {\n    return localStorage.getItem('token');\n  }\n\n  isAuthenticated(): boolean {\n    return !!this.getToken();\n  }\n\n  getCurrentUser(): User | null {\n    return this.currentUserSubject.value;\n  }\n\n  private setCurrentUser(response: AuthResponse): void {\n    localStorage.setItem('token', response.token);\n    localStorage.setItem('user', JSON.stringify(response.user));\n    this.currentUserSubject.next(response.user);\n  }\n\n  private loadUserFromStorage(): void {\n    const user = localStorage.getItem('user');\n    if (user) {\n      this.currentUserSubject.next(JSON.parse(user));\n    }\n  }\n}"],"mappings":"AAEA,SAASA,eAAe,EAAcC,GAAG,QAAQ,MAAM;;;AAMvD,OAAM,MAAOC,WAAW;EAKtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAJhB,KAAAC,MAAM,GAAG,iDAAiD;IAC1D,KAAAC,kBAAkB,GAAG,IAAIN,eAAe,CAAc,IAAI,CAAC;IAC5D,KAAAO,YAAY,GAAG,IAAI,CAACD,kBAAkB,CAACE,YAAY,EAAE;IAG1D,IAAI,CAACC,mBAAmB,EAAE;EAC5B;EAEAC,KAAKA,CAACC,WAAyB;IAC7B,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAe,GAAG,IAAI,CAACP,MAAM,QAAQ,EAAEM,WAAW,CAAC,CACrEE,IAAI,CAACZ,GAAG,CAACa,QAAQ,IAAI,IAAI,CAACC,cAAc,CAACD,QAAQ,CAAC,CAAC,CAAC;EACzD;EAEAE,QAAQA,CAACC,QAAyB;IAChC,OAAO,IAAI,CAACb,IAAI,CAACQ,IAAI,CAAe,GAAG,IAAI,CAACP,MAAM,WAAW,EAAEY,QAAQ,CAAC,CACrEJ,IAAI,CAACZ,GAAG,CAACa,QAAQ,IAAI,IAAI,CAACC,cAAc,CAACD,QAAQ,CAAC,CAAC,CAAC;EACzD;EAEAI,MAAMA,CAAA;IACJC,YAAY,CAACC,UAAU,CAAC,OAAO,CAAC;IAChCD,YAAY,CAACC,UAAU,CAAC,MAAM,CAAC;IAC/B,IAAI,CAACd,kBAAkB,CAACe,IAAI,CAAC,IAAI,CAAC;EACpC;EAEAC,QAAQA,CAAA;IACN,OAAOH,YAAY,CAACI,OAAO,CAAC,OAAO,CAAC;EACtC;EAEAC,eAAeA,CAAA;IACb,OAAO,CAAC,CAAC,IAAI,CAACF,QAAQ,EAAE;EAC1B;EAEAG,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACnB,kBAAkB,CAACoB,KAAK;EACtC;EAEQX,cAAcA,CAACD,QAAsB;IAC3CK,YAAY,CAACQ,OAAO,CAAC,OAAO,EAAEb,QAAQ,CAACc,KAAK,CAAC;IAC7CT,YAAY,CAACQ,OAAO,CAAC,MAAM,EAAEE,IAAI,CAACC,SAAS,CAAChB,QAAQ,CAACiB,IAAI,CAAC,CAAC;IAC3D,IAAI,CAACzB,kBAAkB,CAACe,IAAI,CAACP,QAAQ,CAACiB,IAAI,CAAC;EAC7C;EAEQtB,mBAAmBA,CAAA;IACzB,MAAMsB,IAAI,GAAGZ,YAAY,CAACI,OAAO,CAAC,MAAM,CAAC;IACzC,IAAIQ,IAAI,EAAE;MACR,IAAI,CAACzB,kBAAkB,CAACe,IAAI,CAACQ,IAAI,CAACG,KAAK,CAACD,IAAI,CAAC,CAAC;;EAElD;;;uBAhDW7B,WAAW,EAAA+B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAXlC,WAAW;MAAAmC,OAAA,EAAXnC,WAAW,CAAAoC,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}